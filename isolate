#!/bin/bash

set -euo pipefail

USER="$(whoami)"
RUNDIR="$(dirname "$(realpath "$0")")"
source "$RUNDIR/common.sh"

print_usage_and_exit() {
	echo "spawn:                        $0 [-e engine] [-t templatedir] [-1] [-2] [-n] [-p pwd] [-d dir_host:target_ctr]... [-v env_name:env_value]... [command] [args] ..."
	echo "spawn:                        $0 [-e engine] [-z zfs_template] [-1] [-2] [-n] [-p pwd] [-d dir_host:target_ctr]... [-v env_name:env_value]... [command] [args] ..."
	echo "refresh available zfs clones: $0 [-r template] [-f] [-s] [num_should_avail]"
	echo "  [!] refresh ALWAYS uses the latest snapshot on the dataset"
	echo ""
	echo "OPTIONS"
	echo "		   -e: engine: one of {bwrap, chroot, lxc}, defaults to bwrap"
	echo "		   -d: dirs to mount into the sandbox, mounts dir_host to target_ctr in the container"
	echo "		   -u: uid [integer] to use as base uid. uid and the following 65535 uids are mapped to [0:65535] in the sandbox."
	echo "		   -g: gid [integer] to use as base gid. gid and the following 65535 gids are mapped to [0:65535] in the sandbox."
	echo "			   NOTE: when using -u or -g, you should align the ownership of the template to the range specified."
	echo "		   -v: var:value to pass into the sandbox"
	echo "		   -p: pwd: switch to this directory on spawn. Defaults to /"
	echo "		   -1: bind X11 socket into guest"
	echo "		   -2: bind Pulseaudio socket into guest"
	echo "		   -n: share host network"
	echo "		   -x: trace"
	echo "		   -f: regenerate ALL templates of given zfs template"
	echo "		   -s: skip generating new clones"
	echo "		   -q: quiet: only print warnings and prompts"
	echo ""
	echo "  add all users that should be able to use zfs features to the \`isolate' group"
	echo ""
	echo "ENVIRONMENT VARIABLES"
	echo "   PRE_SPAWN_HOOK: command that is run before [command args] are run in the isolated environment"
	echo "                   \$ROOTFS references the root of the isolated environment to be started"
	echo "   POST_SPAWN_HOOK: command that is run after [command args] has completed in the isolated environment"
	echo "                   \$ROOTFS references the root of the isolated environment to be started"
	echo "   DISABLE_SECCOMP_WRAPPER [=!'']: disable the bwrap seccomp wrapper that prevents IOCTL to host"
	echo "   LXC_NET_BR [=!'']: bridge to be used by LXC, defaults to br_vm"
	echo "   LXC_MAP_TUN [!='']: map /dev/net/tun into the container"
	echo "   DEBUG_LXC_SPAWN [=!'']: if nonzero len, write lxc start log to /tmp/isolate_lxc_log"
	echo ""
	echo "SUPPORTED BY ENGINE"
	echo "  | engine | env | {U/G}ID | net | cmd+args | dirs | pwd | X11 | Pulseaudio |"
    echo "  |--------+-----|---------------+----------+------|-----+-----+------------|"
    echo "  | chroot |     |         |  X  | X        |      |     |     |            |"
    echo "  | bwrap  |     |         |  X  | X        | X    | X   |  X  |     X      |"
    echo "  | lxc    |  X  |    X    |  X  | X        | X    | X   |     |            |"
	exit 0
}

orig_args=( "$@" )
dir_mounts=( )
env_variables=( )
while getopts "e:p:d:xt:hnz:r:v:fs12qu:g:" o; do
	case "$o" in
		e)
			ENGINE="$OPTARG"
			;;
		p)
			workdir="$(realpath --canonicalize-missing "$OPTARG")"
			;;
		d)
			dir_mounts+=( "$OPTARG" )
			;;
		v)
			env_variables+=( "$OPTARG" )
			;;
		x)
			set -x
			;;
		1)
			X11="yes"
			;;
		2)
			PULSE="yes"
			;;
		t)
			template="$OPTARG"
			;;
		n)
			share_net="yes"
			;;
		z)
			getent group isolate | grep -q "\b${USER}\b" 1>/dev/null || die "user not in \`isolate' group, cannot use zfs features"
			zfs_run="yes"
			zfs_template="$OPTARG"
			;;
		r)
			getent group isolate 1>/dev/null || die "cannot function without \`isolate' group"
			do_refresh_template="yes"
			zfs_template="$OPTARG"
			;;
		f)
			FORCEREGENALLZFS="yes"
			;;
		s)
			SKIPGENNEWZFS="yes"
			;;
		q)
			QUIET="yes"
			;;
		u)
			UIDBASE="$OPTARG"
			[[ "$UIDBASE" == +([0-9]) ]] || die "-u ${UIDBASE} is not an integer"
			;;
		g)
			GIDBASE="$OPTARG"
			[[ "$GIDBASE" == +([0-9]) ]] || die "-u ${GIDBASE} is not an integer"
			;;
		h)
			print_usage_and_exit
			;;
		*)
			;;
	esac
done
shift $((OPTIND-1))

check_lockfile_setup() {
	touch "$1" || die "run as root for the first run"
	if (( UID == 0 )); then
		chown "$USER":isolate "$1"
		chmod 660 "$1"
	fi
}

# clean up used zfs clones of $1 and make $2 clones available
refresh_zfs() {
	local zfs_template snapshot
	zfs_template="$1"
	zfs list "$zfs_template" 1>/dev/null || die "invalid zfs template $zfs_template"
	snapshot="$(zfs list -t snapshot "$zfs_template" -S creation -H -o name | head -n 1)"
	
	local num_should_avail
	[[ -z "${2:-}" ]] && [[ -z "${SKIPGENNEWZFS:-}" ]] && die "num_should_avail missing"
	
	local USEDFILE TEMPLATE_MOUNTPOINT FREEFILE ERRORFILE SIGNALFILE LOCKFILE
	TEMPLATE_MOUNTPOINT="$(findmnt -d backward -f -n -oTARGET "$zfs_template")"
	USEDFILE="$(dirname "$TEMPLATE_MOUNTPOINT")/$(basename "$zfs_template")_used"
	[[ -f "$USEDFILE" ]] || touch "$USEDFILE"
	chown root:isolate "$USEDFILE" && chmod 660 "$USEDFILE"
	FREEFILE="$(dirname "$TEMPLATE_MOUNTPOINT")/$(basename "$zfs_template")_fresh"
	[[ -f "$FREEFILE" ]] || touch "$FREEFILE"
	chown root:isolate "$FREEFILE" && chmod 660 "$FREEFILE"
	ERRORFILE="$(dirname "$TEMPLATE_MOUNTPOINT")/.error-destroy-$(basename "$zfs_template")"
	SIGNALFILE="$(dirname "$TEMPLATE_MOUNTPOINT")/.signal-$(basename "$zfs_template")"
	if [[ ! -f "$SIGNALFILE" ]] || [[ "$(stat -c "%a%G" "$SIGNALFILE")" != "660isolate" ]]; then
		touch "$SIGNALFILE"
		chmod 660 "$SIGNALFILE"
		chown root:isolate "$SIGNALFILE"
	fi
	LOCKFILE="$(dirname "$TEMPLATE_MOUNTPOINT")/.$(basename "$zfs_template").lock"
	check_lockfile_setup "$LOCKFILE"

	(
		flock -x -w 3 11 || die "template mgmt lock unavailable"

		if [[ -n "${FORCEREGENALLZFS:-}" ]]; then
			eattention "REGENERATING ALL TEMPLATES"
			cat "$FREEFILE" >> "$USEDFILE"
			truncate --size 0 "$FREEFILE"
		fi

		einfo "reading used templates from ${USEDFILE}"
		tmpfile="$(mktemp /tmp/isolate_usedXXXXXX)"
		while read -r used; do
			einfo "cleaning used template [$used]"
			if [[ ! -f "/tmp/isolate_$(basename "$used")" ]] || ! ps -p "$(cat "/tmp/isolate_$(basename "$used")")" > /dev/null; then
				# if the dataset does not exist, forget that we know it
				zfs list "$used" > /dev/null || continue
				# if it exists but fails to destroy, it might be in use. Try again later
				zfs destroy "$used" || (eattention "error destroying $used"; touch "$ERRORFILE"; echo "$used" >> "$tmpfile")
			else
				eattention "dataset $used is in use, skipping destroy"
				echo "$used" >> "$tmpfile"
			fi
		done < "$USEDFILE"
		truncate --size 0 "$USEDFILE"
		# remember the ones we still have to recycle
		cat "$tmpfile" > "$USEDFILE"
		rm -f "$tmpfile"

		# if usedfile is empty we successfully cleaned up
		[[ ! -s "$USEDFILE" ]] && rm -f "$ERRORFILE"

		if [[ -n "${SKIPGENNEWZFS:-}" ]]; then
			einfo "skipping generation of new clones"
			return
		fi
		
		num_should_avail="$2"
		# idiot proof the whole thing
		[[ "$num_should_avail" =~ ^[0-9]+$ ]] || die "num_should_avail should be a num"
		(( 10#$num_should_avail < 0 )) && die "num_should_avail cannot be negative"
		(( 10#$num_should_avail > 50 )) && die "num_should_avail is a bit too large"
		
		if (( 10#$(wc -l < "$FREEFILE") < 10#$num_should_avail )); then
			num_to_create=$(( 10#$num_should_avail - 10#$(wc -l < "$FREEFILE") ))
			for i in $(seq 1 "$num_to_create"); do
				fresh_template="${zfs_template}_$(date "+%s%N")"
				einfo "creating clone ${fresh_template}, adding to freshlist"
				zfs clone "${snapshot}" "$fresh_template"
				echo "$fresh_template" >> "$FREEFILE"
			done
		else
			einfo "enough fresh templates ($(wc -l < "$FREEFILE")) are available"
		fi
	) 11>"$LOCKFILE"
}

# get a fresh zfs template for the template in $1, respawn the script and use as template
consume_fresh_zfs_template_respawn() {
	local zfs_template
	zfs_template="$1"
	zfs list "$zfs_template" 1>/dev/null || die "invalid zfs template $zfs_template"
	
	local USEDFILE TEMPLATE_MOUNTPOINT FREEFILE SIGNALFILE LOCKFILE
	TEMPLATE_MOUNTPOINT="$(findmnt -d backward -f -n -oTARGET "$zfs_template")"
	USEDFILE="$(dirname "$TEMPLATE_MOUNTPOINT")/$(basename "$zfs_template")_used"
	FREEFILE="$(dirname "$TEMPLATE_MOUNTPOINT")/$(basename "$zfs_template")_fresh"
	SIGNALFILE="$(dirname "$TEMPLATE_MOUNTPOINT")/.signal-$(basename "$zfs_template")"
	LOCKFILE="$(dirname "$TEMPLATE_MOUNTPOINT")/.$(basename "$zfs_template").lock"
	check_lockfile_setup "$LOCKFILE"

	exec 11>"$LOCKFILE"
	flock -x -w 3 11 || die "template mgmt lock unavailable"
	(( 10#$(wc -l < "$FREEFILE") <= 0 )) && ( touch "$SIGNALFILE"; die "no free template clones available, spawn new clones before continuing" )
	
	to_use="$(head -n 1 "$FREEFILE")"
	echo "$to_use" >> "$USEDFILE"

	einfo "using ${to_use} and removing from freefile"
	tmpfile="$(mktemp /tmp/sedXXXXXX)"
	sed '1d' < "$FREEFILE" > "$tmpfile"
	cat "$tmpfile" > "$FREEFILE"
	rm "$tmpfile"

	flock -u 11
	exec 11<&- 
	
	to_use_mountpoint="$(findmnt -d backward -f -n -oTARGET "$to_use")"
	[[ -z "${to_use_mountpoint}" ]] && die "template $to_use seems to be non-existent"
	export ISOLATE_ZFSPREPAREDONE="yes"
	export ISOLATE_ZFSMOUNTPOINT="$to_use_mountpoint"
	export ISOLATE_SIGNALFILE="$SIGNALFILE"
	# respawn on that template
	"$0" "${orig_args[@]}"
}


handle_pre_spawn_hook() {
	if [[ -n "${PRE_SPAWN_HOOK:-}" ]]; then
		einfo "Executing pre spawn hook"
		export ROOTFS="$1"
		$PRE_SPAWN_HOOK
	fi
}
handle_post_spawn_hook() {
	if [[ -n "${POST_SPAWN_HOOK:-}" ]]; then
		einfo "Executing post spawn hook"
		export ROOTFS="$1"
		$POST_SPAWN_HOOK
	fi
}

# chroot into the given template directory but do no further isolation
# $1 is the root, the rest of the args the command
lets_go_chroot() {
	eattention "YOU ARE AWARE THAT THIS MODE DOES NOT ISOLATE"
	local rootfs
	rootfs="$1"
	einfo "CHROOTING INTO $rootfs"

	handle_pre_spawn_hook "$rootfs"
	chroot "$rootfs" "${@:2}" || ISOLATE_EXITCODE="$?"
	handle_post_spawn_hook "$rootfs"

	return "${ISOLATE_EXITCODE:-0}"
}

# spawn the sandbox on the given template directory
# $1 is the root, the rest of the args the command
lets_go_bwrap() {
	local rootfs
	rootfs="$1"
	[[ -z "${*:2}" ]] && print_usage_and_exit
	einfo "ISOLATING ${*:2} in root $rootfs"
	# as long as we use our seccomp wrapper we dont need --new-session
	cmd=( "bwrap" "--setenv" "PATH" "/usr/local/bin:/usr/bin:/bin" "--hostname" "$(basename "$rootfs")" "--cap-drop" "ALL" "--die-with-parent" "--uid" "0" "--gid" "0" "--unshare-ipc" "--unshare-pid" "--unshare-uts" "--unshare-cgroup" "--ro-bind" "$rootfs" "/" "--dev" "/dev" "--proc" "/proc" "--tmpfs" "/tmp" "--tmpfs" "/home" "--chdir" "/" )
	if [[ -n "${share_net:-}" ]]; then
		einfo "ENABLING NETWORK SUPPORT"
		cmd+=( "--share-net" )
	else
		cmd+=( "--unshare-net" )
	fi
	if [[ -n "${X11:-}" ]]; then
		eattention "ALLOWING CONTAINER TO CONNECT TO X11"
		xhost +local:
		einfo "ENABLING X11 SUPPORT"
		cmd+=( "--ro-bind" "/tmp/.X11-unix" "/tmp/.X11-unix" )
	fi
	if [[ -n "${PULSE:-}" ]]; then
		eattention "ALLOWING CONTAINER TO CONNECT TO PULSEAUDIO"
		einfo "setting PULSE_SERVER=unix:/pulse-guest.socket"
		cmd+=( "--setenv" "PULSE_SERVER" "unix:/pulse-guest.socket" )
		cmd+=( "--bind" "/tmp/pulse-socket" "/pulse-guest.socket" )
	fi
	for dir_mount in "${overlay_mounts[@]}"; do
		IFS=':'; from_to=($dir_mount); unset IFS;
		from="${from_to[0]:-}"
		[[ -z "$from" ]] && die "-o ${dir_mount} is invalid"
		to="${from_to[1]:-}"
		[[ -z "$to" ]] && die "-o ${dir_mount} is invalid"
		einfo "Mounting $(realpath "$from") -> $(realpath "$to")"
		cmd+=( "--dir" "$(realpath "$to")" )
		cmd+=( "--bind" "$(realpath "$from")" "$(realpath "$to")" )
	done
	einfo "Workdir is ${workdir:-/}"
	cmd+=( "env" "-C" "${workdir:-/}" )
	[[ -n "${DISABLE_SECCOMP_WRAPPER:-}" ]] && eattention "Disabling seccomp wrapper. IOCTL to host possible [!]"
	[[ -z "${DISABLE_SECCOMP_WRAPPER:-}" ]] && cmd+=( "seccomp_wrapper" )
	cmd+=( "${@:2}" )

	handle_pre_spawn_hook "$rootfs"
	"${cmd[@]}" || ISOLATE_EXITCODE="$?"
	handle_post_spawn_hook "$rootfs"

	return "${ISOLATE_EXITCODE:-0}"
}

# spawn the sandbox on the given template directory
# $1 is the root, the rest of the args the command
lets_go_lxc() {
	local rootfs
	rootfs="$1"
	[[ -z "${*:2}" ]] && print_usage_and_exit
	einfo "ISOLATING ${*:2} in root $rootfs"

	CTR_NAME="$(basename "$rootfs")"
	CTR_NAME="${CTR_NAME//[^[:alnum:]]/-}"


	if (( UID == 0 )); then
		LXC_CONF_TARGET="/var/run/isolate/${CTR_NAME}/config"
	else
		LXC_CONF_TARGET="$HOME/.config/isolate/${CTR_NAME}/config"
	fi
	mkdir -p "$(dirname "$LXC_CONF_TARGET")"

	einfo "DEFINING container $CTR_NAME"
	cat <<-EOF > "$LXC_CONF_TARGET"
		lxc.include = /usr/share/lxc/config/common.conf
		lxc.include = /usr/share/lxc/config/userns.conf
		lxc.cgroup.devices.deny = a # Deny all access to devices		
		lxc.idmap = u 0 ${UIDBASE:-0} 131072
		lxc.idmap = g 0 ${GIDBASE:-0} 131072
		lxc.rootfs.path = $rootfs
		lxc.mount.entry = none tmp tmpfs mode=1777,size=256M 0 0
		lxc.uts.name = $CTR_NAME
		lxc.cgroup.memory.memsw.limit_in_bytes = $(( $(free | awk '/^Mem:/{print $2}') / 100 ))
		lxc.cgroup.memory.limit_in_bytes = $(( $(free | awk '/^Mem:/{print $2}') / 100 ))
EOF

	if [[ -n "${share_net:-}" ]]; then
		einfo "ENABLING NETWORK SUPPORT"
		cat <<-EOF >> "$LXC_CONF_TARGET"
		lxc.net.0.type = veth
		lxc.net.0.link = ${LXC_NET_BR:-br_vm}
		lxc.net.0.flags = up
EOF
	fi

	if [[ -n "${LXC_MAP_TUN:-}" ]]; then
		einfo "ENABLING TUN DEVICE (/dev/net/tun) SUPPORT"
		cat <<-EOF >> "$LXC_CONF_TARGET"
		lxc.cgroup.devices.allow = c 10:200 rwm
		lxc.mount.entry = /dev/net dev/net none bind,create=dir 0 0
		#lxc.cap.keep = mknod
EOF
	fi

	for dir_mount in "${dir_mounts[@]}"; do
		IFS=':'; from_to=($dir_mount); unset IFS;
		from="${from_to[0]:-}"
		[[ -z "$from" ]] && die "-d ${dir_mount} is invalid"
		to="${from_to[1]:-}"
		[[ -z "$to" ]] && die "-d ${dir_mount} is invalid"
		einfo "Mounting $(realpath "$from") -> ${to#/}"
		echo "lxc.mount.entry = $(realpath "$from") ${to#/} none bind,create=dir" >> "$LXC_CONF_TARGET"
	done
	for env_variable in "${env_variables[@]}"; do
		IFS=':'; name_value=($env_variable); unset IFS;
		name="${name_value[0]:-}"
		[[ -z "$name" ]] && die "-d ${env_variable} is invalid"
		value="${name_value[1]:-}"
		[[ -z "$value" ]] && die "-d ${env_variable} is invalid"
		einfo "setting $name to \`$value'"
		echo "lxc.environment = $name=$value" >> "$LXC_CONF_TARGET"
	done

	handle_pre_spawn_hook "$rootfs"
	einfo "STARTING container $CTR_NAME"
	LXCPATH="$(dirname "$(dirname "$LXC_CONF_TARGET")")"
	lxc_start=("lxc-start" "--lxcpath=$LXCPATH" "$CTR_NAME")
	[[ -n "${DEBUG_LXC_SPAWN:-}" ]] && lxc_start+=("--logfile=/tmp/lxc" "--logpriority=debug")
	"${lxc_start[@]}" || fail="yes"
	if [[ -n "${fail:-}" ]]; then
		eattention "container spawn failed, likely a LXC issue"
	else
		einfo "ATTACHING to container $CTR_NAME"
		lxc-attach --lxcpath="$LXCPATH" "$CTR_NAME" -- env -C "${workdir:-/}" "${@:2}" || ISOLATE_EXITCODE="$?"
		einfo "STOPPING container $CTR_NAME, timeout 3s"
		lxc-stop --lxcpath="$LXCPATH" -t 3 "$CTR_NAME"
	fi
	handle_post_spawn_hook "$rootfs"
	rm -rf "$(dirname "$LXC_CONF_TARGET")"

	return "${ISOLATE_EXITCODE:-0}"
}

################################################################################
##################################### MAIN #####################################
################################################################################

[[ -z "${zfs_template:-}" ]] && [[ -z "${template:-}" ]] && die "missing template or zfs template"

if [[ -n "${do_refresh_template:-}" ]] && [[ -z "${ISOLATE_ZFSPREPAREDONE:-}" ]]; then
	(( UID == 0 )) || die "zfs template refresh must be run as root"
	refresh_zfs "$zfs_template" "$@"
else
	rootfs="${template:-}"

	## consuming a zfs template is a two stage process because of locking
	## this is executed in the second call from consume_fresh_zfs_template_respawn
	[[ -n "${ISOLATE_ZFSMOUNTPOINT:-}" ]] && rootfs="$ISOLATE_ZFSMOUNTPOINT"
	## the second call skipps over this
	if [[ -n "${zfs_run:-}" ]] && [[ -z "${ISOLATE_ZFSPREPAREDONE:-}" ]]; then
		consume_fresh_zfs_template_respawn "$zfs_template" || ISOLATE_EXITCODE="$?"
		# if we end up here we already executed in isolation when we called ourselves in consume_fresh_zfs_template_respawn
		exit "${ISOLATE_EXITCODE:-0}"
	fi

	einfo "Using engine ${ENGINE:-bwrap}, wroom wroom"
	PIDFILE="/tmp/isolate_$(basename "$rootfs")"
	echo "$$" > "$PIDFILE"
	case "${ENGINE:-bwrap}" in
		bwrap)
			lets_go_bwrap "$rootfs" "$@" || ISOLATE_EXITCODE="$?"
			;;
		lxc)
			lets_go_lxc "$rootfs" "$@" || ISOLATE_EXITCODE="$?"
			;;
		chroot)
			lets_go_chroot "$rootfs" "$@" || ISOLATE_EXITCODE="$?"
			;;
	esac
	rm -f "$PIDFILE"
	[[ -z "${ISOLATE_SIGNALFILE:-}" ]] || touch "$ISOLATE_SIGNALFILE"

	einfo "ISOLATE exiting, thanks for playing"
	exit "${ISOLATE_EXITCODE:-0}"
fi
